generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id            String      @id @default(uuid())
  clerkUserId   String      @unique
  email         String      @unique
  name          String? 
  imageUrl      String?
  industryId     String?  //can be tech-software-development
  //connect this industry to the industry table.
  industryInsight industryInsight? @relation(fields: [industryId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // Profile fields
  bio           String?
  experience    Int?      // Years of experience
  skills        String[]  // Array of skills
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]

}


model Assessment{
  id           String        @id @default(uuid())
  userId       String        
  user         User        @relation(fields:[userId],references: [id])
  quizScore    Float        
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])   //to make it unique
}


model Resume{
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user
  user        User      @relation(fields: [userId], references: [id]) //User from User model
  content     String    @db.Text // Markdown content
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
   
}
model CoverLetter{
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}



model industryInsight{
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // List of all Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   DemandLevel    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook MarketOutlook    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}
// Enums for industry insights
enum DemandLevel {
  High
  Medium
  Low
}
enum MarketOutlook {
  Positive
  Neutral
  Negative
}